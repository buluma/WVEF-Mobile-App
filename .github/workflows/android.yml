name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: wvef-app-debug.apk

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    # - uses: actions/checkout@v2
    # - name: Set up JDK 8
    #   uses: actions/setup-java@v2
    #   with:
    #     java-version: '8'
    #     distribution: 'adopt'

    - name: remove java 11
      run: ls /usr/lib/jvm/ && sudo rm -r /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64 && ls /usr/lib/jvm/

    - name: check and instl jdk-8
      # run: sudo apt-get install openjdk-8-jdk
      run: sudo apt install openjdk-8-jdk openjdk-8-jre && java -version

    - name: Verify Java11 removed and java-8-openjdk-amd64 installed
      run: ls /usr/lib/jvm/

    - name: check for jdk path and export
      # run: ls /usr/lib/jvm/
      run: ls /usr/lib/jvm/ && export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 && export PATH=$JAVA_HOME/bin:$PATH

    - name: check java version
      run: java -version && echo $JAVA_HOME

    - name: check javac version
      run: javac -version && echo $JAVA_HOME

  test-output:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - run: echo ${{needs.test.outputs}} ${{needs.test.outputs.output2}}
      
  build:

    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v2
    # - name: Set up JDK 8
    #   uses: actions/setup-java@v2
    #   with:
    #     java-version: '8'
    #     distribution: 'adopt'

    - name: remove java 11
      run: ls /usr/lib/jvm/ && sudo rm -r /usr/lib/jvm/adoptopenjdk-11-hotspot-amd64

    - name: check and instl jdk-8
      # run: sudo apt-get install openjdk-8-jdk
      run: sudo apt install openjdk-8-jdk openjdk-8-jre && java -version

    - name: Install Cordova & node-properties-parser
      run: sudo npm install -g cordova && sudo npm install node-properties-parser
      
    - name: Build Android and Push Package
      # You may pin to the exact commit or the version.
      # uses: buluma/setup-cordova@1640182b19452591866992ddd5ac0c36c6b750ec
      uses: buluma/setup-cordova@v0.0.3
      with:
        # Apache Cordova command to execute
        exec: java -version && cordova build android --verbose

    - name: Upload APK File
      uses: actions/upload-artifact@v2
      with:
        name: wvef-app-debug.apk
        path: /github/workspace/platforms/android/app/build/outputs/apk/debug/app-debug.apk

    # - name: APK files
    #   run: tar -cvf wvef-app-debug.apk /github/workspace/platforms/android/app/build/outputs/apk/debug/app-debug.apk

    # - name: 'Upload Artifact'
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: wvef-app-debug-apk
    #     path: wvef-app-debug.apk
  
  build-output:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: check output
      run: echo ${{needs.build.outputs}} ${{needs.build.outputs.output2}}

    - name: Download APK File
      uses: actions/download-artifact@v2
      with:
        name: wvef-app-debug.apk

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  # push:
  #   # Ensure test job passes before pushing image.
  #   needs: build

  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - uses: actions/checkout@v2

  #     # - name: Build image
  #       # run: docker build . --file Dockerfile --tag $IMAGE_NAME

  #     - name: 'APK files'
  #       run: tar -cvf wvef-app-debug.apk /github/workspace/platforms/android/app/build/outputs/apk/debug/app-debug.apk

  #     - name: 'Upload Artifact'
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: wvef-app-debug-apk
  #         path: wvef-app-debug.apk
